The section below lists outstanding issues/features on this code:

- Possible issue, to reproduce:
  tundev shell blocks on get_vtun_parameters
  This is random, but running many times the tundev-side scripts, we sometimes get a ConnectionFrozen exception from the tundev script, after a previous connection that was successful.
  This comes from tundev shell that blocks on get_vtun_parameters (no ouput, no prompt reappears, the shell is hung).
  When this happens, we can observe the following logs in /var/log/daemon.log on the RDV server:
  ```
  Apr 8 12:41:09 RDVServerVM vtund[24913]: /remote-access/rdv-server-tundev-shell/blob/master/VTUN server ver 3.X 03/25/2015 (stand)
  ```
  (it seems there is no line mentionning the self TCP connection log that we usually have from the internal python vtun library)
  After the script disconnects, connections do not work anymore. If we /etc/init.d/vtunmanager restart, this does not solve the pb. We have a remaining vtund on TCP localhost:5000 (shown by lsof -i) The only way to get rid of the failure is to kill the vtund and /etc/init.d/vtunmanager restart

- Rename vtun_manager.py to rdv_engine.py?

- Finish to remove the concept of username in vtun_manager.py (and replace it with something more generic, for example tundev_id)
  Even if, at the end of the day, tundev_id will indeed match with the username, the concept of username should only be used in tundev_shell's code

- Allow segregation of onsite depending on master (access control)
  All master can connect to all onsite. If the system is deployed to many customers and there are several people using master devices, it would be good not to give access to all onsite devs. When calling the tundev shell command show_online_onsite_devs, only authorized onsite devs would be displayed When issuing the connect_to_onsite_dev from command a master dev, only authorized onsite devs would be accepted
  Mapping between onsite and master could be done in a text file (XML, JSON) outside of the source code.

- Add DNS forwarding from onsite to master
  onsite gets the DNS config via DHCP, it should transfer this config to the DNS servers provided via dnsmasq
  onsite devices currently communicate their DNS settings to the RDV server when creating the tunnel RDV server would then give the DNS config to the master when selecting a specific onsite
  Today, on master, dnsmasq announces itself as the DNS, and forwards requests to the master LAN (eth0) but not the onsite LAN
  To remove DNS resolution by the master on the LAN, we need to get rid of the DNS relay function of DNSmasq and provide the onsite's DNS config via DHCP

- Removing test D-Bus method ConfigureService from vtun_manager.py
  Access to configure service via TundevVtunDBusService's ConfigureService() D-Bus method should not be allowed, only direct method invokation of TundevVtunDBusService.configure_service() inherited from TundevVtun

- On PythonVtunLib, improve server-side tunnel management
  On the server side of vtun, there are 2 items:
  * the vtund deamon: it listen to a specific port, and initialize server side of tunnels,
  * the server side of a tunnel: it is the server part of a tunnel that matches a session in the vtund deamon configuration file.
  Currently, there is one deamon for each tunnel. It might not be the best pratice since it uses a port for each tunnel.
  Future improved version of the framework could thus implement a way to keep only one deamon for all tunnels, since the deamon can reload its configuration file, there should be a way to add/remove tunnels, regenerate configuration file and tell the deamon to reload this file.